# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreateUserInput {
  email: String!
  name: String!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Query {
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdateUserInput {
  email: String
  id: ID!
  name: String
}

type User {
  email: String!
  id: ID!
  name: String!
}

type UserAggregateGroupBy {
  email: String
  id: ID
  name: String
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  email: Int
  id: Int
  name: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
}

type UserDeleteResponse {
  email: String
  id: ID
  name: String
}

input UserFilter {
  and: [UserFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserFilter!]
}

type UserMaxAggregate {
  email: String
  id: ID
  name: String
}

type UserMinAggregate {
  email: String
  id: ID
  name: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  email
  id
  name
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
}
